// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-rusyanov/shrinklator/internal/handlers (interfaces: BatchServicer)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package mocks -destination ./mocks/mock_batch_servicer.go . BatchServicer
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/ilya-rusyanov/shrinklator/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockBatchServicer is a mock of BatchServicer interface.
type MockBatchServicer struct {
	ctrl     *gomock.Controller
	recorder *MockBatchServicerMockRecorder
}

// MockBatchServicerMockRecorder is the mock recorder for MockBatchServicer.
type MockBatchServicerMockRecorder struct {
	mock *MockBatchServicer
}

// NewMockBatchServicer creates a new mock instance.
func NewMockBatchServicer(ctrl *gomock.Controller) *MockBatchServicer {
	mock := &MockBatchServicer{ctrl: ctrl}
	mock.recorder = &MockBatchServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchServicer) EXPECT() *MockBatchServicerMockRecorder {
	return m.recorder
}

// BatchShorten mocks base method.
func (m *MockBatchServicer) BatchShorten(arg0 context.Context, arg1 []entities.BatchRequest) ([]entities.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchShorten", arg0, arg1)
	ret0, _ := ret[0].([]entities.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchShorten indicates an expected call of BatchShorten.
func (mr *MockBatchServicerMockRecorder) BatchShorten(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchShorten", reflect.TypeOf((*MockBatchServicer)(nil).BatchShorten), arg0, arg1)
}
