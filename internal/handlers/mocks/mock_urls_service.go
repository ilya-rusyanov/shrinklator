// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-rusyanov/shrinklator/internal/handlers (interfaces: URLsService)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package mocks -destination ./mocks/mock_urls_service.go . URLsService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/ilya-rusyanov/shrinklator/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockURLsService is a mock of URLsService interface.
type MockURLsService struct {
	ctrl     *gomock.Controller
	recorder *MockURLsServiceMockRecorder
}

// MockURLsServiceMockRecorder is the mock recorder for MockURLsService.
type MockURLsServiceMockRecorder struct {
	mock *MockURLsService
}

// NewMockURLsService creates a new mock instance.
func NewMockURLsService(ctrl *gomock.Controller) *MockURLsService {
	mock := &MockURLsService{ctrl: ctrl}
	mock.recorder = &MockURLsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLsService) EXPECT() *MockURLsServiceMockRecorder {
	return m.recorder
}

// URLsForUser mocks base method.
func (m *MockURLsService) URLsForUser(arg0 context.Context, arg1 entities.UserID) (entities.PairArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLsForUser", arg0, arg1)
	ret0, _ := ret[0].(entities.PairArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLsForUser indicates an expected call of URLsForUser.
func (mr *MockURLsServiceMockRecorder) URLsForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLsForUser", reflect.TypeOf((*MockURLsService)(nil).URLsForUser), arg0, arg1)
}
