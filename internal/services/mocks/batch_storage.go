// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-rusyanov/shrinklator/internal/services (interfaces: BatchStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/ilya-rusyanov/shrinklator/internal/entities"
)

// MockBatchStorage is a mock of BatchStorage interface.
type MockBatchStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBatchStorageMockRecorder
}

// MockBatchStorageMockRecorder is the mock recorder for MockBatchStorage.
type MockBatchStorageMockRecorder struct {
	mock *MockBatchStorage
}

// NewMockBatchStorage creates a new mock instance.
func NewMockBatchStorage(ctrl *gomock.Controller) *MockBatchStorage {
	mock := &MockBatchStorage{ctrl: ctrl}
	mock.recorder = &MockBatchStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchStorage) EXPECT() *MockBatchStorageMockRecorder {
	return m.recorder
}

// PutBatch mocks base method.
func (m *MockBatchStorage) PutBatch(arg0 context.Context, arg1 []entities.ShortLongPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBatch indicates an expected call of PutBatch.
func (mr *MockBatchStorageMockRecorder) PutBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBatch", reflect.TypeOf((*MockBatchStorage)(nil).PutBatch), arg0, arg1)
}
